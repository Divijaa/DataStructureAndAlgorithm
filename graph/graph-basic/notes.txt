//graph

*for creating graphs

adj matrix 
adj list -- map<int,list<int>>, list<int> arr[] ;


*if there is n node and n-1 edges then the graph is tree
*







1. 
shortest path from source node (unweighted when all node have same weight)

its simply means slove by bfs...

parent = 0

then child is parent+1



2.
no.of component of graph 
like all graph are not cyclic or connected 

like some are 
1-3-4 and 9-7


can be in parts in that case create a visited array and then itterate thougth it

if element is not visited dfs through it , and then again not visted then againg dfs 


case1  1,3,4 will will be visited then 9,7 will be not visited because they are not linked 

then again start dfs from 9


3.
cycle dectetion in unweighted graph use simple hash 
use bfs or dfs to check node visited or not if a node already visited 
comes for a check then there is a cycle in the graph 
and when there is n node and and n-1 edges thene its a treee

but check for a corner case that parent == child  for this case it will true


4.
Graph Bipartite

Bipartite graph means

graph will break into two sets ex. A  B
such that elements in A will not have and edges with the elements of A, it shoud have edge with Set B

it also called 2 coloring problem 

which means every node will have alternanate color 
if any two node will have same color and bith are linked with each other than it is not bipartite

in simple if a graph in a tree 

then each alternative level have alternate color

if a graph have odd node then it is not bipartite

problem releated to it 

leetcode_765 , in graph-questions



5.
topological sort 

in simple for we havce sort the graph in a way that in
every U -> V , in all the nodes U must occur first in sorted array than U should come
and the it can have more than one top.sort array in a given graph

it can done easily by dfs...
take a list------every time u leave the dfs function just push front the current no. 


6.
height of a tree can simply find out by dfs,bfs,
just take height array ->> parent =1;
then child = parent+1;
works good for graph which are trees , or graphs which are acylic


7.

for check cycle in directed graph

in dfs take a hash 

where hash=0 , when element is not visited

hash = 1 when element is not part of cycle

hash = 2 , when element is in cycle  

means while is not visisted then hash =1;
after the hash = 2 mean the recution fuction is going on then again element came then its a cycle 
while returning the dfs fun hash-- or make hash = 1;



in bfs its easy use khans algo , algo with indgree with hash 

use a counter in  topological sort using khans algo 
after that n==count then topological sort is possible 

when topo sort is possible which means the graph is not cylic 

*topo sort is nopt possible for cylic graph 

then n==count then there is not cycle
else
there is a cycle









