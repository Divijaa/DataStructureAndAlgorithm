vector-----------------------------------------------

vector<int> v;
vector<int> v={1,2,3,4};
vector<int> v={{1,2},{3,4},{5,6}};
vector<int> v(n,0); //to fill it will 0
v.assign(5, 10); //will assign 10 of size 5 , will work after declartion 

v.size();
v.resize(n);  // will resize the vector with n
v.empty();    // 0--false 1--true  
v.clear();

v.push_back(10);
v.pop_back();
v.front();
v.back();

reverse(v.begin(),v.end());
v.insert(v.begin(), 5);
v.insert(v.begin()+1, 6);
v.erase(v.begin());
v.erase(v.begin()+3,v.begin()+5); //will delete the elements 

v.fuction(x) 
// x will be iterator , iterator are basically pointers
vector<int>::iterator ptr = v.begin();
or auto ptr = v.begin();

lower_bound
ex-
vector<int> v{ 10, 20, 30, 30, 30, 40, 50 };

auto low1 = std::lower_bound(v.begin(), v.end(), 30);  #OP-2
auto low2 = std::lower_bound(v.begin(), v.end(), 35);  #OP-5
auto low3 = std::lower_bound(v.begin(), v.end(), 55);  #OP-7

how to print -- cout<<(low1-v.begin());

-its says if the element is present the it will print the index
-if not there but smaller than the another element then it will print 
the index of the next ( greater element - 1 )
-if inbetween it finds a element greater then it - ( greater element - 1 )
-if the no element found and the element is the greatest than all element
then it will print the index of last element
-work good for sorted element



---------------------------------------------------------
map------------------------------------------------------















